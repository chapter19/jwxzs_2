# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2019-06-08 15:57
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CheckedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('if_disable', models.BooleanField(default=False, verbose_name='是否被禁用')),
                ('check_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='验证时间')),
            ],
            options={
                'verbose_name': '已确认用户',
                'verbose_name_plural': '已确认用户',
            },
        ),
        migrations.CreateModel(
            name='CheckedUserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('download', '下载'), ('clone', '克隆')], default='clone', max_length=8, verbose_name='日志类型')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('checked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checked_user_log', to='disks.CheckedUser', verbose_name='已确认用户')),
            ],
            options={
                'verbose_name': '已确认用户使用日志',
                'verbose_name_plural': '已确认用户使用日志',
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.FloatField(default=100000000, verbose_name='网盘容量(b)')),
                ('used_size', models.FloatField(default=0.0, verbose_name='已用使用大小(b)')),
                ('if_close', models.BooleanField(default=False, verbose_name='用户是否关闭')),
                ('close_time', models.DateTimeField(blank=True, null=True, verbose_name='关闭时间')),
                ('resume_time', models.DateTimeField(blank=True, null=True, verbose_name='恢复时间')),
                ('if_disable', models.BooleanField(default=False, verbose_name='是否被禁用')),
                ('if_open', models.BooleanField(default=True, verbose_name='是否全部公开')),
                ('file_count', models.IntegerField(default=0, verbose_name='文件数')),
                ('folder_count', models.IntegerField(default=0, verbose_name='文件夹数')),
                ('root_file_count', models.IntegerField(default=0, verbose_name='根目录文件数')),
                ('root_folder_count', models.IntegerField(default=0, verbose_name='根目录文件夹数')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('ower', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='my_disk', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '网盘',
                'verbose_name_plural': '网盘',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('9151aed0-71ca-4c2a-90e0-cb8ed1630d40'), primary_key=True, serialize=False, verbose_name='id')),
                ('verbose_id', models.UUIDField(default=uuid.UUID('fe956b4f-b035-44b1-a10d-9fbe28680f0f'), verbose_name='用于下载的id')),
                ('file', models.FileField(upload_to='disk_uploads/%Y/%m/%d', verbose_name='文件')),
                ('name', models.CharField(blank=True, help_text='文件名', max_length=50, null=True, verbose_name='文件名')),
                ('size', models.FloatField(default=0.0, verbose_name='文件大小(b)')),
                ('if_open', models.BooleanField(default=False, verbose_name='是否公开')),
                ('if_auto_open', models.BooleanField(default=False, verbose_name='是否自动递归公开')),
                ('thumbnail', models.ImageField(default='thumbnail/default/other_default.png', upload_to='', verbose_name='缩略图')),
                ('if_clone', models.BooleanField(default=False, verbose_name='是否克隆')),
                ('if_auto_clone', models.BooleanField(default=False, verbose_name='是否自动递归克隆')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('if_delete', models.BooleanField(default=False, verbose_name='是否回收')),
                ('clone_count', models.IntegerField(default=0, verbose_name='克隆量')),
                ('download_count', models.IntegerField(default=0, verbose_name='下载量')),
                ('if_auto_delete', models.BooleanField(default=False, verbose_name='是否自动递归回收 ')),
                ('if_auto_resume', models.BooleanField(default=False, verbose_name='是否自动递归恢复')),
                ('delete_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('resume_time', models.DateTimeField(blank=True, null=True, verbose_name='恢复时间')),
            ],
            options={
                'verbose_name': '文件',
                'verbose_name_plural': '文件',
            },
        ),
        migrations.CreateModel(
            name='FileExtension',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('04a69509-1216-4c13-b1ab-972a6279070f'), primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='拓展名')),
                ('type', models.CharField(max_length=20, verbose_name='类型')),
                ('thumbnail', models.ImageField(default='thumbnail/default/other_default.png', upload_to='', verbose_name='缩略图')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '文件拓展名',
                'verbose_name_plural': '文件拓展名',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('2d66278e-7344-4896-8396-809bb039a3b2'), primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(default='', max_length=50, verbose_name='文件夹名')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('child_folder_count', models.IntegerField(default=0, verbose_name='文件夹数')),
                ('file_count', models.IntegerField(default=0, verbose_name='文件量')),
                ('if_open', models.BooleanField(default=False, verbose_name='是否全部公开')),
                ('if_auto_open', models.BooleanField(default=False, verbose_name='是否自动递归公开')),
                ('if_delete', models.BooleanField(default=False, verbose_name='是否回收')),
                ('if_auto_delete', models.BooleanField(default=False, verbose_name='是否自动递归回收')),
                ('clone_time', models.IntegerField(default=0, verbose_name='被克隆次数')),
                ('if_clone', models.BooleanField(default=False, verbose_name='是否克隆')),
                ('if_auto_clone', models.BooleanField(default=False, verbose_name='是否自动递归克隆')),
                ('click_count', models.IntegerField(default=0, verbose_name='点击量')),
                ('clone_count', models.IntegerField(default=0, verbose_name='克隆量')),
                ('if_auto_resume', models.BooleanField(default=False, verbose_name='是否自动递归恢复')),
                ('delete_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('resume_time', models.DateTimeField(blank=True, null=True, verbose_name='恢复时间')),
            ],
            options={
                'verbose_name': '文件夹',
                'verbose_name_plural': '文件夹',
            },
        ),
        migrations.CreateModel(
            name='FolderPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(default=1, verbose_name='编号')),
                ('path_folder_id', models.UUIDField(blank=True, null=True, verbose_name='路径文件夹id')),
                ('path_folder_name', models.CharField(default='', max_length=50, verbose_name='路径文件夹名')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='path', to='disks.Folder', verbose_name='哪个文件夹')),
            ],
            options={
                'verbose_name': '文件夹、文件路径',
                'verbose_name_plural': '文件夹、文件路径',
                'ordering': ('num',),
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=20, unique=True, verbose_name='标签名')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('folder_count', models.IntegerField(default=0, verbose_name='文件夹数')),
                ('file_count', models.IntegerField(default=0, verbose_name='文件量')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '标签',
                'verbose_name_plural': '标签',
            },
        ),
        migrations.CreateModel(
            name='OpenFolderPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(default=1, verbose_name='编号')),
                ('path_folder_id', models.IntegerField(blank=True, null=True, verbose_name='路径文件夹id')),
                ('path_folder_name', models.CharField(default='', max_length=50, verbose_name='路径文件夹名')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='open_path', to='disks.Folder', verbose_name='文件夹')),
            ],
            options={
                'verbose_name': '开放文件夹路径',
                'verbose_name_plural': '开放文件夹路径',
                'ordering': ('num',),
            },
        ),
        migrations.CreateModel(
            name='ShareLink',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('46fe1b33-910d-4ae0-8e7b-ed9c457e5c62'), primary_key=True, serialize=False, verbose_name='id')),
                ('password', models.CharField(blank=True, max_length=100, null=True, verbose_name='密码')),
                ('if_synchro', models.BooleanField(default=True, verbose_name='链接是否和硬盘同步更新')),
                ('status', models.CharField(choices=[('normal', '正常'), ('error', '异常')], default='normal', max_length=6, verbose_name='状态')),
                ('time_limit', models.DateTimeField(blank=True, null=True, verbose_name='过期时间')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_sharelink', to=settings.AUTH_USER_MODEL, verbose_name='分享者')),
            ],
            options={
                'verbose_name': '分享链接',
                'verbose_name_plural': '分享链接',
            },
        ),
        migrations.CreateModel(
            name='ShareLinkFile',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('2ce57f0d-97a5-4d6e-9bfd-3fd37b5e2864'), primary_key=True, serialize=False, verbose_name='id')),
                ('verbose_id', models.UUIDField(default=uuid.UUID('5eb5e7fc-4b26-4fff-a07a-da1bcd7c1a1c'), verbose_name='用于下载的id')),
                ('file', models.FileField(upload_to='disk_uploads/%Y/%m/%d/', verbose_name='文件')),
                ('name', models.CharField(blank=True, help_text='文件名', max_length=50, null=True, verbose_name='文件名')),
                ('size', models.FloatField(default=0.0, verbose_name='文件大小(b)')),
                ('thumbnail', models.ImageField(default='thumbnail/default/other_default.png', upload_to='', verbose_name='缩略图')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('if_delete', models.BooleanField(default=False, verbose_name='是否回收')),
                ('clone_count', models.IntegerField(default=0, verbose_name='克隆量')),
                ('download_count', models.IntegerField(default=0, verbose_name='下载量')),
                ('delete_time', models.DateTimeField(blank=True, null=True, verbose_name='回收时间')),
                ('resume_time', models.DateTimeField(blank=True, null=True, verbose_name='恢复时间')),
                ('auto_label', models.ManyToManyField(blank=True, related_name='sharelink_auto_file', to='disks.Label', verbose_name='自动添加的标签')),
                ('extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='disks.FileExtension', verbose_name='文件拓展名')),
                ('label', models.ManyToManyField(blank=True, related_name='sharelink_file', to='disks.Label', verbose_name='标签')),
                ('original_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sharelink_file', to='disks.File', verbose_name='对应原文件')),
                ('sharelink', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_sharelink_file', to='disks.ShareLink', verbose_name='分享链接')),
            ],
            options={
                'verbose_name': '分享链接文件',
                'verbose_name_plural': '分享链接文件',
            },
        ),
        migrations.CreateModel(
            name='ShareLinkFolder',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('7ce11b28-487b-4ce7-a27f-0afbe82fbc17'), primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(default='', max_length=50, verbose_name='文件夹名')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('child_sharelink_folder_count', models.IntegerField(default=0, verbose_name='文件夹数')),
                ('if_delete', models.BooleanField(default=False, verbose_name='是否回收')),
                ('file_count', models.IntegerField(default=0, verbose_name='文件量')),
                ('clone_time', models.IntegerField(default=0, verbose_name='被克隆次数')),
                ('click_count', models.IntegerField(default=0, verbose_name='点击量')),
                ('clone_count', models.IntegerField(default=0, verbose_name='克隆量')),
                ('delete_time', models.DateTimeField(blank=True, null=True, verbose_name='回收时间')),
                ('resume_time', models.DateTimeField(blank=True, null=True, verbose_name='恢复时间')),
                ('auto_label', models.ManyToManyField(blank=True, related_name='sharelink_auto_folder', to='disks.Label', verbose_name='自动添加的标签')),
                ('label', models.ManyToManyField(blank=True, related_name='sharelink_folder', to='disks.Label', verbose_name='标签')),
                ('original_folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sharelink_folder', to='disks.Folder', verbose_name='对应原文件夹')),
                ('parent_sharelink_folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_sharelink_folder', to='disks.ShareLinkFolder', verbose_name='父文件夹')),
                ('sharelink', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_sharelink_folder', to='disks.ShareLink', verbose_name='分享链接')),
            ],
            options={
                'verbose_name': '分享链接文件夹',
                'verbose_name_plural': '分享链接文件夹',
            },
        ),
        migrations.CreateModel(
            name='ShareLinkFolderPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(default=1, verbose_name='编号')),
                ('path_folder_id', models.UUIDField(blank=True, null=True, verbose_name='路径文件夹id')),
                ('path_folder_name', models.CharField(default='', max_length=50, verbose_name='路径文件夹名')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('sharelink_folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_path', to='disks.ShareLinkFolder', verbose_name='分享链接文件夹')),
            ],
            options={
                'verbose_name': '分享链接文件夹路径',
                'verbose_name_plural': '分享链接文件夹路径',
                'ordering': ('num',),
            },
        ),
        migrations.AddField(
            model_name='sharelinkfile',
            name='sharelink_folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sharelink_file', to='disks.ShareLinkFolder', verbose_name='分享链接文件夹'),
        ),
        migrations.AddField(
            model_name='folder',
            name='auto_label',
            field=models.ManyToManyField(blank=True, related_name='my_auto_folder', to='disks.Label', verbose_name='自动添加的标签'),
        ),
        migrations.AddField(
            model_name='folder',
            name='clone_from',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='which_clone_me', to='disks.Folder', verbose_name='克隆哪个'),
        ),
        migrations.AddField(
            model_name='folder',
            name='disk',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_all_folder', to='disks.Disk', verbose_name='网盘'),
        ),
        migrations.AddField(
            model_name='folder',
            name='label',
            field=models.ManyToManyField(blank=True, related_name='my_folder', to='disks.Label', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='folder',
            name='parent_folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_folder', to='disks.Folder', verbose_name='父文件夹'),
        ),
        migrations.AddField(
            model_name='file',
            name='auto_label',
            field=models.ManyToManyField(blank=True, related_name='my_auto_file', to='disks.Label', verbose_name='自动添加的标签'),
        ),
        migrations.AddField(
            model_name='file',
            name='clone_from',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='which_clone_me', to='disks.File', verbose_name='克隆哪个'),
        ),
        migrations.AddField(
            model_name='file',
            name='disk',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_all_file', to='disks.Disk', verbose_name='网盘'),
        ),
        migrations.AddField(
            model_name='file',
            name='extension',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='disks.FileExtension', verbose_name='文件拓展名'),
        ),
        migrations.AddField(
            model_name='file',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='file', to='disks.Folder', verbose_name='所属文件夹'),
        ),
        migrations.AddField(
            model_name='file',
            name='label',
            field=models.ManyToManyField(blank=True, related_name='my_file', to='disks.Label', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='checkeduserlog',
            name='sharelink_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checked_user_log', to='disks.ShareLinkFile', verbose_name='分享链接文件'),
        ),
        migrations.AddField(
            model_name='checkeduserlog',
            name='sharelink_folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checked_user_log', to='disks.ShareLinkFolder', verbose_name='分享链接文件夹'),
        ),
        migrations.AddField(
            model_name='checkeduser',
            name='share_link',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checked_user', to='disks.ShareLink', verbose_name='分享链接'),
        ),
        migrations.AddField(
            model_name='checkeduser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='what_share_link_i_checked', to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AlterUniqueTogether(
            name='sharelinkfolderpath',
            unique_together=set([('num', 'sharelink_folder')]),
        ),
        migrations.AlterUniqueTogether(
            name='sharelinkfolder',
            unique_together=set([('name', 'sharelink', 'parent_sharelink_folder')]),
        ),
        migrations.AlterUniqueTogether(
            name='sharelinkfile',
            unique_together=set([('sharelink', 'sharelink_folder', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='openfolderpath',
            unique_together=set([('num', 'folder')]),
        ),
        migrations.AlterUniqueTogether(
            name='folderpath',
            unique_together=set([('num', 'folder')]),
        ),
        migrations.AlterUniqueTogether(
            name='folder',
            unique_together=set([('name', 'parent_folder')]),
        ),
        migrations.AlterUniqueTogether(
            name='file',
            unique_together=set([('name', 'folder')]),
        ),
        migrations.AlterUniqueTogether(
            name='checkeduser',
            unique_together=set([('share_link', 'user')]),
        ),
    ]
